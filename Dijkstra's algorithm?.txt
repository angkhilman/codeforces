Time limit for test1 second
Memory limit per test: 64 megabytes
inputstandard input
outputstandard output
An undirected weighted graph is given, the vertices of which are numbered from 1 to n. Your task is to find the shortest path from vertex 1 to vertex n.

Input data
The first line contains integers n and m (2 ≤ n ≤ 105, 0 ≤ m ≤ 105), where n is the number of vertices and m is the number of edges in the graph. Next m lines contain the edges themselves, one per line. Each edge is specified by three numbers ai, bi, wi (1 ≤ ai, bi ≤ n, 1 ≤ wi ≤ 106), where ai, bi are the ends of the edge, and wi is its length.

The graph can contain multiple edges and loops.

Output
Print the number -1 if there is no path or the shortest path itself if it exists.



#include<bits/stdc++.h>

using namespace std;

const long long INF = 100000000000000000;

int main() {

    int n, m, f, s, w;
    cin >> n;
    cin >> m;

    vector <vector <pair <int, int> > > g(n);

    for (int i = 0; i < m; i++){
        cin >> f;
        cin >> s;
        cin >> w;
        g[f - 1].push_back(make_pair(s - 1, w));
        g[s - 1].push_back(make_pair(f - 1, w));
    }

    vector <long long> d(n, INF), p (n);
    for (int i = 0; i < n; i++){
        p[i] = -1;
    }
    d[0] = 0;
    priority_queue <pair <long long, int> > q;
    q.push(make_pair(0, 0));
    while (!q.empty()){
        int v = q.top().second;
        long long cur_d = 1LL * (-q.top().first);
        q.pop();
        if (cur_d > d[v])
            continue;
        for (size_t j = 0; j < g[v].size(); j++){
            int to = g[v][j].first, len = g[v][j].second;
            if (1LL * d[v] + len < 1LL * (d[to])){
                d[to] = 1LL * d[v] + len;
                p[to] = v;
                q.push(make_pair(1LL * (-d[to]), to));
            }
        }
    }

    if (d[n - 1] == INF){
        cout << -1 << "\n";
    }
    else{
        vector<int> path;
        for (int v=n - 1; v!=0; v=p[v])
            path.push_back (v + 1);
        path.push_back (1);
        reverse (path.begin(), path.end());
        for (size_t i = 0; i < path.size(); i++)
            cout << path[i] << " ";
    }

    return 0;
}
